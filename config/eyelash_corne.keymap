#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        LHRM: LHRM {
            compatible = "zmk,behavior-hold-tap";
            label = "LHRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41 45 46 47>;
        };

        RHRM: RHRM {
            compatible = "zmk,behavior-hold-tap";
            label = "RHRM";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44>;
        };

        EQ_PLUS: EQ_PLUS {
            compatible = "zmk,behavior-mod-morph";
            label = "EQ_PLUS";
            bindings = <&kp EQUAL>, <&kp PLUS>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
            keep-mods = <(MOD_RCTL)>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    keymap {
        compatible = "zmk,keymap";

        layer_0 {
            display-name = "QWERTY";
            bindings = <
&kp TAB  &kp Q          &kp W          &kp E             &kp R             &kp T                                &kp UP                &kp Y            &kp U              &kp I              &kp O                  &kp P                        &kp BSPC
&kp ESC  &LHRM LSHFT A  &LHRM LCTRL S  &LHRM LEFT_ALT D  &LHRM LEFT_GUI F  &kp G                      &kp LEFT  &kp ENTER  &kp RIGHT  &kp H            &RHRM RIGHT_GUI J  &RHRM RIGHT_ALT K  &RHRM RIGHT_CONTROL L  &RHRM RIGHT_SHIFT SEMICOLON  &kp SQT
&td0     &kp Z          &kp X          &kp C             &kp V             &kp B         &kp SPACE              &kp DOWN              &kp N            &kp M              &kp COMMA          &kp DOT                &kp FSLH                     &mt RIGHT_SHIFT ENTER
                                       &kp LGUI          &lt 1 SPACE       &lt 2 DELETE                                               &lt 2 BACKSPACE  &lt 1 SPACE        &kp RCTRL
            >;
        };

        layer_1 {
            display-name = "Nav";
            bindings = <
&mt F1 F7  &mt F2 F7  &mt F3 F8  &mt F4 F9  &mt F5 F10  &mt F6 F12                         &none         &kp PG_UP        &kp HOME         &kp UP           &kp END          &kp N0    &trans
&trans     &kp LG(A)  &kp LG(S)  &kp LG(D)  &kp LG(F)   &kp C_VOLUME_UP             &none  &none  &none  &kp PG_DN        &kp LEFT         &kp DOWN         &kp RIGHT        &kp HOME  &kp PG_UP
&none      &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)   &kp C_VOLUME_DOWN  &none           &none         &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &kp END   &kp PG_DN
                                 &trans     &trans      &trans                                           &trans           &trans           &trans
            >;
        };

        layer_2 {
            display-name = "Num";
            bindings = <
&kp GRAVE  &kp Q      &kp LC(W)  &kp LC(E)  &kp LC(R)  &kp LC(T)                   &none         &kp CARET  &kp N7  &kp N8  &kp N9  &kp MINUS  &kp MINUS
&trans     &kp LC(A)  &kp LC(D)  &kp LC(D)  &kp LC(F)  &kp G                &none  &none  &none  &kp MINUS  &kp N4  &kp N5  &kp N6  &kp PLUS   &kp GRAVE
&trans     &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(B)  &trans           &none         &kp UNDER  &kp N1  &kp N2  &kp N3  &kp EQUAL  &kp EQUAL
                                 &trans     &trans     &trans                                    &trans     &trans  &trans
            >;
        };

        layer_3 {
            display-name = "Fn";
            bindings = <
&out OUT_TOG  &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                     &none         &none            &mkp LCLK        &mmv MOVE_UP     &mkp RCLK        &none            &studio_unlock
&sys_reset    &bt BT_CLR       &none            &none            &none            &trans                    &none  &none  &none  &bootloader      &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_RIGHT  &kp PRINTSCREEN  &none
&bootloader   &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &none           &none         &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_SPD  &rgb_ug RGB_BRD  &rgb_ug RGB_TOG  &bl BL_TOG
                                                &trans           &trans           &trans                                         &trans           &trans           &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        L3 {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
